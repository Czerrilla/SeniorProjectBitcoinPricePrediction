How to use code Cameron Zerrilla
This code is for machine learning in predicting bitcoin closing prices.

lines 1-8:
these lines are simple imports used to bring in the neccecary tools for machine learning and plotting the data.

lines 9-15:

#This line will read in your data either use  BitNas.csv,BitcoinandEthereumdata.csv, or Bitcoindata.csv  for data 

Bitcoin_data = pd.read_csv('BitNas.csv') #read in the data file

#This line is used to use only the desired columns I perfer to keep close at the end to make splitting the desired value to predict and the features used for prediction easier to split

Bitcoin_data=Bitcoin_data[['NasDaqopen','NasDaqClose','NasdaqLow','NasdaqHigh','NasdaqVolume','Open','High','Low','Volume','MarketCap',
'Close']] #choose the columns you want

#This line is only used for BitNas there was an empty line at the end that needed to be dropped

Bitcoin_data.drop(Bitcoin_data.tail(1).index,
        inplace = True) #the nasdaq file has an empty line therefore with the nasdaq file drop the last line

#Put the features used for prediction in X

X = Bitcoin_data.iloc[:,:10].values # split the data into features for learning and features for predicting
#X is used for prediction

#Put the feature being predicted in Y in this case closing price

Y = Bitcoin_data.iloc[:, 10].values #Y is the closing price of bitcoin (this is our goal to predict) 

Lines 15-32:

#These 3 arrays store the values I desired RMSE,MAE,MSE if there are other statistics that are of interest keep their array here

RMSEAVG=[]
MAEAVG=[]
MSEAVG=[]

#This foor loop is the number of desired trees so i in range(75,251) are 75 trees to 250 trees

for i in range(75,251):
    
    #these 3 totals are used to keep track of the totals of their corresponging values

    RMSETotal=0 
    MAETotal=0
    MSETotal=0
    

    #this for loop goes trough 1-100 tests so it will do 1 test with a random split, another, another, ...., 100
    for j in range (1,101):

        #split the data into training and split sets using random seed none to keep getting random splits test size is 20%
        #test_size controls the testing/training split use .3 for a 7030 split
        #random_state=np.random.seed(NONE) is used to create a random split in the data and order the data randomly each time

        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,random_state=np.random.seed(None))
        regressor = RandomForestRegressor(n_estimators=i)
        regressor.fit(X_train, Y_train)
        Y_pred = regressor.predict(X_test)

        # these three lines are used to add each metric to the total sum of each measured metric

        RMSETotal=RMSETotal+np.sqrt(metrics.mean_squared_error(Y_test, Y_pred))
        MAETotal=MAETotal+metrics.mean_absolute_error(Y_test, Y_pred)
        MSETotal=MSETotal+metrics.mean_squared_error(Y_test, Y_pred)

    #after the 100 runs each total will be divided by 100 to get the average then pushed on the array for our total averages   
    RMSEAVG.append(RMSETotal/100)
    MAEAVG.append(MAETotal/100)
    MSEAVG.append(MSETotal/100)


// The next section of code lines 42-55 are used to interpret the data adjust as needed:

# this example is for how i get the minimum value for each array using a simple for loop
#sets the minimum to the first value in the array

min=MAEAVG[0]

n=0 # n is used as an accumulator for our minnum

sum=0 #sum is the sum of each number in MAEAVG

minnum=0 #min num is the location of the tree with the smallest  MAE for example if minnum is 2 since our tree set goes from 75 to 250
#the tree with the smallest MAE will be at 76

for i in MAEAVG:# for each result
    sum=sum+i #add the result to the sum
    n=n+1  # add 1 to the tree count
    if i < min: #if i is < 
        min=i # set the new minimum
        minnum=n

#prints the average
        
print(sum/176) 

#prints the minimum maeavg

print(minnum) 

#prints the location of the set
print(min) 


//next section of code lines 55-64 are for displaying the data adjust as needed

numtrees=[]

#this for loop simply makes an array each number representing the number of trees in each set

for i in range(75,251):
    numtrees.append(i)
plt.scatter(numtrees, MAEAVG, c=RMSEAVG, cmap='Spectral') # plot the number of trees as the x axis and each MAEAvg for each 
#each corresponding set of trees

plt.colorbar()
plt.title('RMSE AVG for Each Tree')
plt.xlabel('# of trees')
plt.ylabel('RMSE AVG')
plt.show()


The code above can be implemented using different splits, data, and methods with simple adjustments.

